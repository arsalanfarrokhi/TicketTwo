const express = require('express');
require('dotenv').config();
const cors = require('cors');
const db = require('./db');
const app = express();

app.use(cors());
app.use(express.json()); // middleware ; use to retrieve info in body/ jason sent from client into a js, so we can maniputale

/*
***********************************************************
!!!! Important !!  Before using this file, make sure you have the following constraints !!!!!!!!!!

**** CONSTRAINT ticket_fk_flight FOREIGN KEY(AssociatedWith) REFERENCES Flight ON UPDATE CASCADE ON DELETE CASCADE,
**** CONSTRAINT ticket_fk_traveler FOREIGN KEY(BookedFor) REFERENCES Traveler ON UPDATE CASCADE ON DELETE CASCADE,
**** CONSTRAINT ticket_fk_user FOREIGN KEY (BookedBy) REFERENCES _user ON UPDATE CASCADE ON DELETE CASCADE);

***********************************************************
*/

//Get all restaraunts
app.get('/api/admin/flights', async (req, res) =>{
    const { flight_text} = req.query;
    try{
        var results;
        if (flight_text===undefined) {
            results = await db.query("select * from flight where departuretime >= NOW() order by departuretime;");
        } else {
            results = await db.query(`select * from flight where fromairport like '%${flight_text}%' or toairport like '%${flight_text}%';`); 
        }
        res.status(200).json({
            results: results.rows.length, 
            status: 'success',
            data: {
                flights: results.rows
            }
        })
    } catch(err){
        console.log(err);
    }
});

app.get('/api/login', async (req, res) =>{
    const {email, password} = req.query;
    try{
        
        const results = await db.query("select * from _user where email=$1;", [email]);
        const user = results.rows[0];
        if(user.password !== password){
            res.status(200).json({
                results: 0, 
                status: 'Incorrect password',
                data: []
            })
        }
        else{
            console.log(results.rows);
            res.status(200).json({
            results: results.rows.length, 
            status: 'success',
            data: results.rows[0]
            })
        }
    } catch(err){
        console.log(err);
    }
});

app.get('/api/admin/users', async(req, res) =>{
    const {email} = req.query;
    try{
        var results;
        if(email===undefined){
            results = await db.query('select userid, email, password from _user where privilege <> 1 order by userid;');
        }
        else{
            console.log(email);
            results = await db.query(`select userid, email, password from _user where privilege <> 1 and email LIKE '%${email}%';`);
        }
        res.status(200).json({
            results: results.rows.length, 
            status: 'success',
            data: {
                users: results.rows
            }
        })
    }catch(err){
        res.status(200).json({
            status: 'failed'
    
       })
    }
})

//Get one user by id from Admin
app.get('/api/admin/users/:id', async(req, res) =>{
    try{
								   
										 
        const {id} = req.params;
									  
						
				   
		 
        const results = await db.query("SELECT userid, email, password FROM _user WHERE userid = $1;",[id]);
        res.status(200).json({
            results: results.rows.length, 
            status: 'success',
            data: {
                users: results.rows
            }
        })
    }catch(err){
        console.log(err);
    }
})
app.post('/api/admin/users', async (req, res) =>{
    try{
        let email = req.body.email;
        let password = req.body.password;
        const res_id = await db.query('select max(userid)+1 as newid from _user;');
        let id = res_id.rows[0].newid;
        if(id === null){
            id = 0;
        }
        const results = await db.query("insert into _user (userid, email, password, privilege) values ($1, $2, $3, $4) returning * ;", [id, email, password, 0]);
        res.status(200).json({
            results: results.rows.length, 
            status: 'success',
            data: {
                users: results.rows
            }
        })
    }catch(err){
        console.log(err);
    }
})

// Update user id from admin
app.put('/api/admin/users/:id', async(req, res) =>{
    const {id} = req.params;
    try{
        const{email, password} = req.body;
        console.log(email, password);
        const results = await db.query('update _user set email = $1, password = $2 where userid = $3 returning *;', [email, password, id]);
        res.status(200).json({
            results: results.rows.length, 
            status: 'update success',
            data: {
                users: results.rows
            }
        })
    }catch(err){
        console.log(err);
        res.json({ 
            status: 'failed',
            data: {
            }
        })
    }
})

app.put('/api/admin/users', async(req, res) =>{
    const {id, email, password} = req.body;
    try{
        const results = await db.query('update _user set email = $1, password = $2 where userid = $3 returning *;', [email, password, id]);
        res.status(200).json({
            results: results.rows.length, 
            status: 'success',
            data: {
                users: results.rows
            }
        })
    }catch(err){
        console.log(err);
        res.json({ 
            status: 'failed',
            data: {
            }
        })
    }
})

// Delete a user by id from admin
app.delete('/api/admin/users/:id', async (req, res) =>{
    const {id} = req.params;
					
    try{
        // update capacity,
        await db.query("UPDATE flight SET capacity = capacity+1 WHERE flightid IN (SELECT associatedwith FROM ticket WHERE bookedby = $1);", [id]);
        // // delete tickets (if no constraints, un-comment the below query)
        // await db.query("DELETE FROM ticket WHERE bookedby = $1;", [id]);

        // delete user. 
        const results = await db.query('delete from _user where userid = $1 returning *;',[id]);
        res.status(200).json({
            results: results.rows.length, 
            status: 'delete success',
            data: {
                users: results.rows
            }
        })
    }catch(err){
        console.log(err);
        res.json({ 
            status: 'failed',
            data: {
            }
        })
    }
})

app.delete('/api/admin/users', async (req, res) =>{
    const {id} = req.query;
    console.log(id);
    try{
        const results = await db.query('delete from _user cascade where userid = $1 returning *;', [id]);
        res.status(200).json({
            results: results.rows.length, 
            status: 'success',
            data: {
                users: results.rows
            }
        })
    }catch(err){
        console.log(err);
        res.json({ 
            status: 'failed',
            data: {
            }
        })
    }
})

// // //
// CREATE VIEW user_ticket_info AS SELECT ticketid , F.flightid AS flightid, fromairport , toairport, departuretime, arrivaltime, firstname, lastname, DATE(dob),bookedby as userid, bookedfor as travelerid, passportid  
//  FROM (traveler RIGHT JOIN ticket ON traveler.travelerid = ticket.bookedfor) AS T LEFT JOIN flight F ON T.associatedwith = F.flightid ORDER BY ticketid;
// // //
// Get one tickets by ticketid from admin
app.get('/api/user/tickets/:id' ,async(req,res) =>{
    const {id} = req.params;
    try{
        const results = await db.query('SELECT * FROM  user_ticket_info WHERE userid = $1 ORDER BY ticketid;', [id]);
									  
																				  
		 
			 
																																				
		 
        res.status(200).json({
            results: results.rows.length, 
            status: 'success',
            data: {
                tickets: results.rows
            }
        })
    }catch(err){
        console.log(err);
							
	
		 
    }
})

// Get all travelers
app.get('/api/admin/travelers', async(req, res) =>{
    const { traveler_name } = req.query;
    try{
        var results;
        if(traveler_name===undefined){
            results = await db.query('select * from traveler order by lastname;');
        }
        else{
            results = await db.query(`select * from traveler where firstname LIKE '%${traveler_name}%' or lastname LIKE '%${traveler_name}%';`);
        }
        res.status(200).json({
            results: results.rows.length, 
            status: 'success',
            data: {
                travelers: results.rows
            }
        })
    }catch(err){
        res.status(200).json({
            status: 'failed'
    
       })
    }
})

app.put('/api/admin/travelers', async(req, res) =>{
    const {id, firstname, lastname, email, phonenum, passportid, dob} = req.body;
    try{
        const results = await db.query('update traveler set firstname = $1, lastname = $2, email = $3, phonenum = $4, passportid = $5, dob = $6 where travelerid = $7 returning *;', [firstname, lastname, email, phonenum, passportid, dob, id]);
        res.status(200).json({
            results: results.rows.length, 
            status: 'success',
            data: {
                travelers: results.rows
            }
        })
    }catch(err){
        console.log(err);
        res.json({ 
            status: 'failed',
            data: {
            }
        })
    }
})

app.post('/api/admin/travelers', async (req, res) =>{
    try{
        let firstname = req.body.firstname;
        let lastname = req.body.lastname;
        let email = req.body.email;
        let phonenum = req.body.phonenum;
        let passportid = req.body.passportid;
        let dob = req.body.dob;
        const res_id = await db.query('select max(travelerid)+1 as newid from traveler;');
        let id = res_id.rows[0].newid;
        if(id === null){
            id = 0;
        }
        const results = await db.query("insert into traveler (travelerid, firstname, lastname, email, phonenum, passportid, dob) values ($1, $2, $3, $4, $5, $6, $7) returning * ;", [id, firstname, lastname, email, phonenum, passportid, dob]);
        res.status(200).json({
            results: results.rows.length, 
            status: 'success',
            data: {
                travelers: results.rows
            }
        })
    }catch(err){
        console.log(err);
    }
})

app.delete('/api/admin/travelers', async (req, res) =>{
    const { id } = req.query;
    // console.log(id);
    try{
        const results = await db.query('delete from traveler cascade where travelerid = $1 returning *;', [id]);
        res.status(200).json({
            results: results.rows.length, 
            status: 'success',
            data: {
                travelers: results.rows
            }
        })
    }catch(err){
        console.log(err);
        res.json({ 
            status: 'failed',
            data: {
            }
        })
    }
})

// Get tickets for a traveler
app.get('/api/admin/travelers/tickets', async(req, res) =>{
    const { id } = req.query;
    try{
        const results = await db.query('select * from ticket where bookedfor = $1;', [id]);
        console.log(id);
        res.status(200).json({
            results: results.rows.length, 
            status: 'success',
            data: {
                tickets: results.rows,
            }
        })
    }catch(err){
        res.status(200).json({
            status: 'failed'
       })
    }
})

const port = process.env.port;
app.listen(port, () => {
    console.log("listening on ", port);
});